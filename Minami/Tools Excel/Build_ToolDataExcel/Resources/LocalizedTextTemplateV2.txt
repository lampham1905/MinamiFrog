using System.Collections.Generic;
using System.Text;
using UnityEngine;

public class LOCALIZATION_CLASS_NAME
{
//LOCALIZED_DICTIONARY_KEY_ENUM
//LOCALIZED_DICTIONARY_KEY_CONST
//LOCALIZED_DICTIONARY_KEY_STRING
//LOCALIZED_DICTIONARY

    private static string[] mTexts;
    private static string mFolder = "Data";
	private static string mLanguageTemp;
    public static string currentLanguage
    {
        get { return PlayerPrefs.GetString("currentLanguage", defaultLanguage); }
        set
        {
            if (currentLanguage != value)
            {
                PlayerPrefs.SetString("currentLanguage", value);
                Init();
            }
        }
    }

    public LOCALIZATION_CLASS_NAME()
    {
        Init();
    }

    public static void Init()
    {
        if (mLanguageTemp != currentLanguage)
        {
            string file = languageDict[currentLanguage];
            string json = Resources.Load<TextAsset>(mFolder + "/" + file).text;
            mTexts = GetJsonList(json);
            mLanguageTemp = currentLanguage;
        }
    }

    private static string[] GetTexts()
    {
        if (mTexts == null)
            Init();
        return mTexts;
    }

    public static string Get(ID pId)
    {
        return GetTexts()[(int)pId];
    }

    public static string Get(int pId)
    {
        if (pId >= 0 && pId < GetTexts().Length)
            return GetTexts()[pId];
        Debug.LogError("Not found id " + pId);
        return "";
    }

    public static string Get(string pIdString)
    {
        int index = 0;
        for (int i = 0; i < idString.Length; i++)
        {
            if (pIdString == idString[i])
            {
                index = i;
                return Get(index);
            }
        }
        Debug.LogError("Not found idString " + pIdString);
        return "";
    }

    public static string Get(string pIdString, ref int pIndex)
    {
        pIndex = -1;
        for (int i = 0; i < idString.Length; i++)
        {
            if (pIdString == idString[i])
            {
                pIndex = i;
                return Get(pIndex);
            }
        }
        Debug.LogError("Not found idString " + pIdString);
        return "";
    }

    public static string Get(string pIdString, ref ID pId)
    {
        int index = -1;
        for (int i = 0; i < idString.Length; i++)
        {
            if (pIdString == idString[i])
            {
                index = i;
                pId = (ID)index;
                return Get(pId);
            }
        }
        Debug.LogError("Not found idString " + pIdString);
        return "";
    }

    public static string[] GetJsonList(string json)
    {
        var sb = new StringBuilder();
        string newJson = sb.Append("{").Append("\"array\":").Append(json).Append("}").ToString();
        StringArray wrapper = JsonUtility.FromJson<StringArray>(newJson);
        return wrapper.array;
    }

    [System.Serializable]
    private class StringArray
    {
        public string[] array;
    }
}

public class LOCALIZATION_CLASS_NAMEGetter
{
    private static Dictionary<string, int> cachedTexts = new Dictionary<string, int>();

    public string key;
    public string defaultStr;

    private int mIndex = -1;
    private bool mCheckKey;

    public LOCALIZATION_CLASS_NAMEGetter(string pKey, string pDefault)
    {
        key = pKey;
        defaultStr = pDefault;

#if UNITY_EDITOR
        //In Editor we check it soon to find missing localization
        LOCALIZATION_CLASS_NAME.Get(key, ref mIndex);
        mCheckKey = true;
#endif
    }

    public string Get()
    {
        if (!mCheckKey)
        {
            LOCALIZATION_CLASS_NAME.Get(key, ref mIndex);
            mCheckKey = true;
        }

        if (mIndex == -1)
            return defaultStr;
        var text = LOCALIZATION_CLASS_NAME.Get(mIndex);
        if (string.IsNullOrEmpty(text))
            return defaultStr;
        else
            return LOCALIZATION_CLASS_NAME.Get(mIndex).Replace("\\n", "\u000a");
    }

    public static string GetCached(string pKey)
    {
        if (cachedTexts.ContainsKey(pKey))
        {
            int id = cachedTexts[pKey];
            if (id != -1)
            {
                string text = LOCALIZATION_CLASS_NAME.Get(cachedTexts[pKey]);
                return !string.IsNullOrEmpty(text) ? text : pKey;
            }
            return pKey;
        }
        else
        {
            int id = -1;
            string text = LOCALIZATION_CLASS_NAME.Get(pKey, ref id);
            cachedTexts.Add(pKey, id);
            return !string.IsNullOrEmpty(text) ? text : pKey;
        }
    }
}